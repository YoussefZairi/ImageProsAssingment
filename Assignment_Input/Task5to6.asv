% Task 5: Robust method --------------------------
% Task 4: Object Recognition --------------------

% Load the new image
IMG_11 = imread('IMG_03.png');

%Covert image to grayscale
I_gray = rgb2gray(IMG_11);
figure, imshow(I_gray);
title('Grayscale Image');

%Rescale image
height = 512;
[rows,cols] = size(I_gray);
new_width = round(cols * (height / rows));
I_resized = imresize(I_gray, [height, new_width]);

%Enhance Image
I_enhanced = imadjust(I_resized);

% Calculate mean brightness
mean_brightness = mean(I_enhanced(:)); % Mean pixel intensity across the whole image
disp(['Mean Brightness: ', num2str(mean_brightness)]);

% Define a threshold to decide binarization method (adjust as needed)
brightness_threshold = 20; % Example threshold (range 0-255)

%Determine threshold with Otsu's method
threshold = graythresh(I_enhanced);

%Convert to Binary
%%%I_binary = imbinarize(I_enhanced, threshold);

% Select binarization method based on mean brightness
if mean_brightness > brightness_threshold
    % Bright image: Use global thresholding
    disp('Using Global Thresholding...');
    threshold = graythresh(I_gray); % Compute global threshold (Otsu's method)
    I_binary = imbinarize(I_gray, threshold); % Binarize
else
    % Dark image: Use adaptive thresholding
    disp('Using Adaptive Thresholding...');
    sensitivity = 0.5; % Adjust sensitivity (higher for darker images)
    adaptive_thresh = adaptthresh(I_gray, sensitivity);
    I_binary = imbinarize(I_gray, adaptive_thresh); % Binarize
end


%Edge Detection
I_edge = edge(I_binary, 'roberts');

%Add Padding
padded_edges = padarray(I_edge, [1, 1], 0, 'both');
se = strel('disk', 1);

%Dilate
a_dilated_edges = imdilate(padded_edges, se);

%Bridge
dilated_edges = bwmorph(a_dilated_edges,"bridge");

%FILL CORNERS
%Fill Corners (ref
%https://blogs.mathworks.com/steve/2013/09/05/defining-and-filling-holes-on-the-border-of-an-image/)

%a: Filling the cells at top and left border of the image
d_edges_a = padarray(dilated_edges,[1 1],1,'pre');
d_edges_a_filled = imfill(d_edges_a, "holes");
d_edges_a_filled = d_edges_a_filled(2:end, 2:end);

%b: Filling the cells at top and right border of the image
d_edges_b = padarray(padarray(dilated_edges,[1 0],1,'pre'),[0 1],1,'post');
d_edges_b_filled = imfill(d_edges_b, "holes");
d_edges_b_filled = d_edges_b_filled(2:end, 1:end-1);

%c: Filling the cells at bottom and right border of the image
d_edges_c = padarray(dilated_edges,[1 1],1,'post');
d_edges_c_filled = imfill(d_edges_c, "holes");
d_edges_c_filled = d_edges_c_filled(1:end-1,1:end-1);

%d: Filling the cells at top and left border of the image
d_edges_d = padarray(padarray(dilated_edges,[1 0],1,'post'),[0 1],1,'pre');
d_edges_d_filled = imfill(d_edges_d, "holes");
d_edges_d_filled = d_edges_d_filled(1:end-1, 2:end);

%Fill image
I_filled = d_edges_a_filled | d_edges_b_filled | d_edges_c_filled | d_edges_d_filled;

% Remove noise
I_cleaned = bwareaopen(I_filled, 500);

% Smooth edges
I_smoothed = imclose(I_cleaned, strel('disk', 2));

% Label connected components
I_labeled = bwlabel(I_smoothed);

%Better Extract Features for robust
% Extract features
stats = regionprops(I_labeled, 'Area', 'Eccentricity', 'Solidity', 'Perimeter');
areas = [stats.Area];
eccentricities = [stats.Eccentricity];
solidities = [stats.Solidity];
perimeters = [stats.Perimeter];
circularities = (4 * pi * areas) ./ (perimeters .^ 2);

%Print stats
for i = 1:numel(stats)
    fprintf('Object %d: Area = %.2f, Eccentricity = %.2f, Solidity = %.2f, Perimeter = %.2f, Circularity: %.2f\n', i, stats(i).Area, stats(i).Eccentricity, stats(i).Solidity, stats(i).Perimeter, circularities(i));
end

% Extract features from labeled image
stats = regionprops(I_labeled, 'Area', 'Eccentricity','Solidity','Perimeter');

% Thresholds for classification
blood_cells_mask = ismember(I_labeled, find([stats.Area] > 2000  ));
bacteria_mask = ismember(I_labeled, find([stats.Area] <=2000 & [stats.Area] > 500 ));

% Create an RGB image
colored_final = zeros([size(I_labeled), 3]);
colored_final(:,:,1) = blood_cells_mask;
colored_final(:,:,2) = bacteria_mask;
colored_final(:,:,3) = bacteria_mask;
figure, imshow(colored_final);
title('Colored Final')

figure;
subplot(2, 2, 1);
imshow(sobel_edges);
title('Sobel Edge Detection');

subplot(2, 2, 2);
imshow(prewitt_edges);
title('Prewitt Edge Detection');

subplot(2, 2, 3);
imshow(canny_edges);
title('Canny Edge Detection');

subplot(2, 2, 4);
figure, imshow(colored_final);
title('Colored Final')
% Task 6: Performance evaluation -----------------
% Step 1: Load ground truth data
%GT = imread("IMG_01_GT.png");

% To visualise the ground truth image, you can
% use the following code.
%L_GT = label2rgb(rgb2gray(GT), 'prism','k','shuffle');
%figure, imshow(L_GT)